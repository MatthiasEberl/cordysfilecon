/**
 * Copyright 2005 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys File Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.cordys.coe.ac.fileconnector.extensions.directorypoller;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class LogMessages
{
    /**
     * Holds the definition of the message set.
     */
    public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.fileconnector.extensions.directorypoller.LogMessages");

    /**
     * Holds the definition of the message with ID CONNECTOR_MANAGEMENT_DESCRIPTION. Message text:
     * Directory Poller
     */
    public static final Message CONNECTOR_MANAGEMENT_DESCRIPTION = MESSAGE_SET.getMessage("CONNECTOR_MANAGEMENT_DESCRIPTION");
    /**
     * Holds the definition of the message with ID CNTR_FILE_SCAN_TIME. Message text: Time used for
     * scanning files in the input folder(s).
     */
    public static final Message CNTR_FILE_SCAN_TIME = MESSAGE_SET.getMessage("CNTR_FILE_SCAN_TIME");
    /**
     * Holds the definition of the message with ID CNTR_TRIGGER_TIME. Message text: Duration of SOAP
     * message trigger.
     */
    public static final Message CNTR_TRIGGER_TIME = MESSAGE_SET.getMessage("CNTR_TRIGGER_TIME");
    /**
     * Holds the definition of the message with ID CNTR_INPUT_FILES. Message text: Number of seen
     * input files
     */
    public static final Message CNTR_INPUT_FILES = MESSAGE_SET.getMessage("CNTR_INPUT_FILES");
    /**
     * Holds the definition of the message with ID CNTR_RESTARTED_FILES. Message text: Number of
     * times file processing is restarted after connector restart.
     */
    public static final Message CNTR_RESTARTED_FILES = MESSAGE_SET.getMessage("CNTR_RESTARTED_FILES");
    /**
     * Holds the definition of the message with ID CNTR_PROCESSED_FILES_SUCCESS. Message text:
     * Number of successfully processed files
     */
    public static final Message CNTR_PROCESSED_FILES_SUCCESS = MESSAGE_SET.getMessage("CNTR_PROCESSED_FILES_SUCCESS");
    /**
     * Holds the definition of the message with ID CNTR_PROCESSED_FILES_ERROR. Message text: Number
     * of processed files moved to the error folder
     */
    public static final Message CNTR_PROCESSED_FILES_ERROR = MESSAGE_SET.getMessage("CNTR_PROCESSED_FILES_ERROR");
    /**
     * Holds the definition of the message with ID CNTR_PROCESSED_FILES_TOTAL. Message text: Total
     * number of processed files
     */
    public static final Message CNTR_PROCESSED_FILES_TOTAL = MESSAGE_SET.getMessage("CNTR_PROCESSED_FILES_TOTAL");
    /**
     * Holds the definition of the message with ID CNTR_PROCESSING_TIME. Message text: Average
     * processing time. This does not include the scanning time.
     */
    public static final Message CNTR_PROCESSING_TIME = MESSAGE_SET.getMessage("CNTR_PROCESSING_TIME");
    /**
     * Holds the definition of the message with ID CNTR_FILE_SIZE. Message text: Average incoming
     * file size
     */
    public static final Message CNTR_FILE_SIZE = MESSAGE_SET.getMessage("CNTR_FILE_SIZE");
    /**
     * Holds the definition of the message with ID CNTR_CUR_WORKER_THREADS. Message text: Number of
     * active worker threads.
     */
    public static final Message CNTR_CUR_WORKER_THREADS = MESSAGE_SET.getMessage("CNTR_CUR_WORKER_THREADS");
    /**
     * Holds the definition of the message with ID CNTR_CUR_WORK_QUEUE_SIZE. Message text: Current
     * size of the thread pool queue.
     */
    public static final Message CNTR_CUR_WORK_QUEUE_SIZE = MESSAGE_SET.getMessage("CNTR_CUR_WORK_QUEUE_SIZE");
    /**
     * Holds the definition of the message with ID CNTR_CUR_FILES_IN_PROCESS. Message text: Number
     * of files in the processing folder.
     */
    public static final Message CNTR_CUR_FILES_IN_PROCESS = MESSAGE_SET.getMessage("CNTR_CUR_FILES_IN_PROCESS");
    /**
     * Holds the definition of the message with ID ALERT_FILE_ERROR. Message text: Processing of
     * file {0} ended in an error: {1}
     */
    public static final Message ALERT_FILE_ERROR = MESSAGE_SET.getMessage("ALERT_FILE_ERROR");
    /**
     * Holds the definition of the message with ID ALERT_FILE_ERROR_DESC. Message text: File
     * processing error
     */
    public static final Message ALERT_FILE_ERROR_DESC = MESSAGE_SET.getMessage("ALERT_FILE_ERROR_DESC");
    /**
     * Holds the definition of the message with ID HOTSETTING_NUM_WORKERS. Message text: Number of
     * worker threads.
     */
    public static final Message HOTSETTING_NUM_WORKERS = MESSAGE_SET.getMessage("HOTSETTING_NUM_WORKERS");
    /**
     * Holds the definition of the message with ID HOTSETTING_MIN_WORKERS. Message text: Minumum
     * number of worker threads.
     */
    public static final Message HOTSETTING_MIN_WORKERS = MESSAGE_SET.getMessage("HOTSETTING_MIN_WORKERS");
    /**
     * Holds the definition of the message with ID HOTSETTING_MAX_WORKERS. Message text: Maxumum
     * number of worker threads.
     */
    public static final Message HOTSETTING_MAX_WORKERS = MESSAGE_SET.getMessage("HOTSETTING_MAX_WORKERS");
    
    /** Unable to delete the source file. */
  	public static final Message UNABLE_TO_DELETE_SRC_FILE = MESSAGE_SET.getMessage("UNABLE_TO_DELETE_SRC_FILE");

  	/** Folder is already defined with name: {0} */
  	public static final Message FOLDER_IS_ALREADY_DEFINED = MESSAGE_SET.getMessage("FOLDER_IS_ALREADY_DEFINED");

  	/** The actual location (directory) needs to be specified. */
  	public static final Message ACTUAL_LOCATION_NOT_SPECIFIED = MESSAGE_SET.getMessage("ACTUAL_LOCATION_NOT_SPECIFIED");

  	/** The name needs to be specified. */
  	public static final Message NAME_NOT_SPECIFIED = MESSAGE_SET.getMessage("NAME_NOT_SPECIFIED");

  	/** Unable to create input folder: {0} */
  	public static final Message UNABLE_TO_CREATE_INPUT_FOLDER = MESSAGE_SET.getMessage("UNABLE_TO_CREATE_INPUT_FOLDER");

  	/** Input folder is not a folder: {0} */
  	public static final Message INPUT_DIR_IS_NOT_A_DIRECTORY = MESSAGE_SET.getMessage("INPUT_DIR_IS_NOT_A_DIRECTORY");

  	/** Input folder is not readable: {0} */
  	public static final Message INPUT_DIR_NOT_REACHABLE = MESSAGE_SET.getMessage("INPUT_DIR_NOT_REACHABLE");

  	/** Input folder is not writable: {0} */
  	public static final Message INPUT_DIR_NOT_WRITABLE = MESSAGE_SET.getMessage("INPUT_DIR_NOT_WRITABLE");

  	/** The track-time parameter needs to be specified. */
  	public static final Message TRACK_TIME_PARAM_NOT_SPECIFIED = MESSAGE_SET.getMessage("TRACK_TIME_PARAM_NOT_SPECIFIED");

  	/** Invalid track-time value: {0} */
  	public static final Message INVALID_TRACK_TIME = MESSAGE_SET.getMessage("INVALID_TRACK_TIME");

  	/** The trigger node is undefined. */
  	public static final Message TRIGGER_NODE_UNDEFINED = MESSAGE_SET.getMessage("TRIGGER_NODE_UNDEFINED");

  	/** The methodname is not specified for the folder. */
  	public static final Message METHODNAME_NOT_SPECIFIED = MESSAGE_SET.getMessage("METHODNAME_NOT_SPECIFIED");

  	/** The namespace for the trigger method is not specified for the folder. */
  	public static final Message NAMESPACE_NOT_SPECIFIED = MESSAGE_SET.getMessage("NAMESPACE_NOT_SPECIFIED");

  	/** Unable to load error handler class: {0} */
  	public static final Message UNABLE_TO_LOAD_ERROR_HANDLER_CLASS = MESSAGE_SET.getMessage("UNABLE_TO_LOAD_ERROR_HANDLER_CLASS");

  	/** Invalid filter type: {0} */
  	public static final Message INVALID_FILTER_TYPE = MESSAGE_SET.getMessage("INVALID_FILTER_TYPE");

  	/** Invalid file filter: {0} */
  	public static final Message INVALID_FILE_FILTER = MESSAGE_SET.getMessage("INVALID_FILE_FILTER");

  	/** Unable to lock the processing folder: {0} */
  	public static final Message UNABLE_TO_LOCK_PROC_FOLDER = MESSAGE_SET.getMessage("UNABLE_TO_LOCK_PROC_FOLDER");

  	/** File {0} does not exist. */
  	public static final Message FILE_NOT_EXIST = MESSAGE_SET.getMessage("FILE_NOT_EXIST");

  	/** File processing could not be resumed. */
  	public static final Message COULD_NOT_RESUME_FILE_PROCESS = MESSAGE_SET.getMessage("COULD_NOT_RESUME_FILE_PROCESS");

  	/** Folder {0} could not be found on the filesystem. */
  	public static final Message FOLDER_NOT_FOUND = MESSAGE_SET.getMessage("FOLDER_NOT_FOUND");

  	/** No folders specified for the DirectoryPoller. */
  	public static final Message NO_DIR_SPECIFIED_FOR_POLLER = MESSAGE_SET.getMessage("NO_DIR_SPECIFIED_FOR_POLLER");

  	/** Configuration file not set for this connector. */
  	public static final Message CONFIGURATION_FILE_NOT_SET = MESSAGE_SET.getMessage("CONFIGURATION_FILE_NOT_SET");

  	/** Invalid response received from XMLStore. */
  	public static final Message INVALID_RESPONSE_RECIVED = MESSAGE_SET.getMessage("INVALID_RESPONSE_RECIVED");

  	/** DirectoryPoller configuration file not found: {0} */
  	public static final Message DIRECTORYPOLLER_CONFIG_FILE_NOT_FOUND = MESSAGE_SET.getMessage("DIRECTORYPOLLER_CONFIG_FILE_NOT_FOUND");

  	/** Unable to load configuration from XMLStore. */
  	public static final Message UNABLE_TO_LOAD_CONFIGURATION = MESSAGE_SET.getMessage("UNABLE_TO_LOAD_CONFIGURATION");

  	/** Invalid parameter type: {0} */
  	public static final Message INVALID_PARAM_TYPE = MESSAGE_SET.getMessage("INVALID_PARAM_TYPE");

  	/** Folder configuration is not set. */
  	public static final Message FOLDER_CONFIGURATION_NOT_SET = MESSAGE_SET.getMessage("FOLDER_CONFIGURATION_NOT_SET");

  	/** Configured folder name is not set. */
  	public static final Message CONFIG_FOLDER_NAME_NOT_SET = MESSAGE_SET.getMessage("CONFIG_FOLDER_NAME_NOT_SET");

  	/** Configured folder not found: {0} */
  	public static final Message CONFIGURED_FOLDER_NOT_FOUND = MESSAGE_SET.getMessage("CONFIGURED_FOLDER_NOT_FOUND");

  	/** Error encoding input file: {0} */
  	public static final Message ERROR_ENCODING_INPUT_FILE = MESSAGE_SET.getMessage("ERROR_ENCODING_INPUT_FILE");

  	/** Error reading input file: {0} */
  	public static final Message ERROR_READING_INPUT_FILE = MESSAGE_SET.getMessage("ERROR_READING_INPUT_FILE");
  	
  	/** File state cannot return false in the processing folder! */
  	public static final Message FILE_STATE_CANNOT_RETURN_FALSE = MESSAGE_SET.getMessage("FILE_STATE_CANNOT_RETURN_FALSE");

  	/** File state is not set. */
  	public static final Message FILE_STATE_NOT_SET = MESSAGE_SET.getMessage("FILE_STATE_NOT_SET");

  	/** Finished state reached while scanning. */
  	public static final Message FINISH_STATE_REACHED_WHILE_SCANNING = MESSAGE_SET.getMessage("FINISH_STATE_REACHED_WHILE_SCANNING");

  	/** SOAP request has already been sent and probably failed. */
  	public static final Message REQUEST_ALREADY_SENT_PROBABLY_FAILED = MESSAGE_SET.getMessage("REQUEST_ALREADY_SENT_PROBABLY_FAILED");

  	/** Input folder it not set. */
  	public static final Message INPUT_FOLDER_NOT_SET = MESSAGE_SET.getMessage("INPUT_FOLDER_NOT_SET");

  	/** Current file it not set. */
  	public static final Message CURRENT_FILE_NOT_SET = MESSAGE_SET.getMessage("CURRENT_FILE_NOT_SET");

  	/** Original input file it not set. */
  	public static final Message ORIGINAL_INPUT_FILE_NOT_SET = MESSAGE_SET.getMessage("ORIGINAL_INPUT_FILE_NOT_SET");

  	/** NOM connector it not set. */
  	public static final Message NOM_CONNECTOR_NOT_SET = MESSAGE_SET.getMessage("NOM_CONNECTOR_NOT_SET");

  	/** Unable to create SOAP method. */
  	public static final Message UNABLE_TO_CREATE_SOAP_METHOD = MESSAGE_SET.getMessage("UNABLE_TO_CREATE_SOAP_METHOD");

  	/** Unable to create trigger SOAP request. */
  	public static final Message UNABLE_TO_TRIGGER_SOAP_REQUEST = MESSAGE_SET.getMessage("UNABLE_TO_TRIGGER_SOAP_REQUEST");

  	/** Error triggering the webservice for {0} */
  	public static final Message ERROR_TRIGGERING_WEBSERVICE = MESSAGE_SET.getMessage("ERROR_TRIGGERING_WEBSERVICE");

  	/** No file found from the processing folder: {0} */
  	public static final Message NO_FILE_FOUND = MESSAGE_SET.getMessage("NO_FILE_FOUND");

  	/** File ID is not set. */
  	public static final Message FILE_ID_NOT_SET = MESSAGE_SET.getMessage("FILE_ID_NOT_SET");

  	/** File locking failed. */
  	public static final Message FILE_LOCKING_FAILED = MESSAGE_SET.getMessage("FILE_LOCKING_FAILED");

  	/** Unable to create the processing folder: {0} */
  	public static final Message UNABLE_TO_CREATE_PROC_FOLDER = MESSAGE_SET.getMessage("UNABLE_TO_CREATE_PROC_FOLDER");

  	/** The renaming of file {0} to {1} failed. */
  	public static final Message RENAMING_FILE_FAILED = MESSAGE_SET.getMessage("RENAMING_FILE_FAILED");

  	/** File could not be locked. Cordys user probably does not have write permissions. File: {0} */
  	public static final Message FILE_COULD_NOT_BE_LOCKED = MESSAGE_SET.getMessage("FILE_COULD_NOT_BE_LOCKED");

  	/** Trigger requires an application processing folder but it has not been configured. */
  	public static final Message TRIGGER_REQUIRES_APP_PROCESSING_FOLDER = MESSAGE_SET.getMessage("TRIGGER_REQUIRES_APP_PROCESSING_FOLDER");

  	/** No start entry written. */
  	public static final Message NO_START_ENTRY_WRITTEN = MESSAGE_SET.getMessage("NO_START_ENTRY_WRITTEN");

  	/** Unable to write state finished timestamp to file state log: {0} */
  	public static final Message UNABLE_TO_WIRTE_STATE_TIMESTAMP = MESSAGE_SET.getMessage("UNABLE_TO_WIRTE_STATE_TIMESTAMP");

  	/** Unable to open/create state log file: {0} */
  	public static final Message UNABLE_TO_OPEN_STATE_LOG_FILE = MESSAGE_SET.getMessage("UNABLE_TO_OPEN_STATE_LOG_FILE");

  	/** Unable to read state log file: {0} */
  	public static final Message UNABLE_TO_READ_STATE_LOG_FILE = MESSAGE_SET.getMessage("UNABLE_TO_READ_STATE_LOG_FILE");

  	/** Log file does not exist: {0} */
  	public static final Message LOG_FILE_NOT_EXIST = MESSAGE_SET.getMessage("LOG_FILE_NOT_EXIST");

  	/** Unable write state {0} to file state log: {1} */
  	public static final Message UNABLE_TO_WRITE_STATE_TO_LOG_FILE = MESSAGE_SET.getMessage("UNABLE_TO_WRITE_STATE_TO_LOG_FILE");

  	/** Unable read the file state log: {0} */
  	public static final Message UNABLE_TO_READ_STATE_LOG = MESSAGE_SET.getMessage("UNABLE_TO_READ_STATE_LOG");
  	
  	/** Trigger state returned false  */
  	public static final Message TRIGGER_STATE_RETURNED_FALSE = MESSAGE_SET.getMessage("TRIGGER_STATE_RETURNED_FALSE");
  	
}
