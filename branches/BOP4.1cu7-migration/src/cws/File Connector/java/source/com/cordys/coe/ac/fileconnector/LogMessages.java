/**
 * Copyright 2005 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys File Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.cordys.coe.ac.fileconnector;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class LogMessages
{
    /**
     * Holds the definition of the message set.
     */
    public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.fileconnector.LogMessages");

    /**
     * Holds the definition of the message with ID DriveMappingUnreadable. Message text: Exception
     * reading drive mappings
     */
    public static final Message DRIVE_MAPPING_UNREADABLE = MESSAGE_SET.getMessage("DriveMappingUnreadable");
    /**
     * Holds the definition of the message with ID NoConnectorFound. Message text: No connector
     * object found. Aborting.
     */
    public static final Message NO_CONNECTOR_FOUND = MESSAGE_SET.getMessage("NoConnectorFound");
    /**
     * Holds the definition of the message with ID NoConfigurationFound. Message text: No
     * application configuration found. Aborting.
     */
    public static final Message NO_CONFIGURATION_FOUND = MESSAGE_SET.getMessage("NoConfigurationFound");
    /**
     * Holds the definition of the message with ID CoeLibVersionInvalid. Message text: There is a
     * problem with the CoE library version.
     */
    public static final Message COE_LIB_VERSION_INVALID = MESSAGE_SET.getMessage("CoeLibVersionInvalid");
    /**
     * Holds the definition of the message with ID UnableToOpenConnector. Message text: Unable to
     * open the connector object.
     */
    public static final Message UNABLE_TO_OPEN_CONNECTOR = MESSAGE_SET.getMessage("UnableToOpenConnector");
    /**
     * Holds the definition of the message with ID UnableToLoadCharset. Message text: Unable to load
     * the custom character set provider.
     */
    public static final Message UNABLE_TO_LOAD_CHARSET = MESSAGE_SET.getMessage("UnableToLoadCharset");
    /**
     * Holds the definition of the message with ID UnableToGetConfigurationElement. Message text:
     * Unable to get the configuration element.
     */
    public static final Message UNABLE_TO_GET_CONFIGURATION_ELEMENT = MESSAGE_SET.getMessage("UnableToGetConfigurationElement");
    /**
     * Holds the definition of the message with ID UnableToCreateMapping. Message text: The mapping
     * to {0} could not be created
     */
    public static final Message UNABLE_TO_CREATE_MAPPING = MESSAGE_SET.getMessage("UnableToCreateMapping");
    /**
     * Holds the definition of the message with ID TransactionFailed. Message text: FileConnector
     * transaction failed.
     */
    public static final Message TRANSACTION_FAILED = MESSAGE_SET.getMessage("TransactionFailed");
    /**
     * Holds the definition of the message with ID CONNECTOR_MANAGEMENT_DESCRIPTION. Message text:
     * File Connector
     */
    public static final Message CONNECTOR_MANAGEMENT_DESCRIPTION = MESSAGE_SET.getMessage("CONNECTOR_MANAGEMENT_DESCRIPTION");
    
    /** No actions specified in the request. */
  	public static final Message NO_ACTION_SPECIFIED = MESSAGE_SET.getMessage("NoActionSpecified");

  	/** Unknown action '{0}' */
  	public static final Message UNKNOWN_ACTION = MESSAGE_SET.getMessage("UnknownAction");

  	/** Configuration not found */
  	public static final Message CONFIGURATION_NOT_FOUND = MESSAGE_SET.getMessage("ConfigurationNotFound");

  	/** Root-tag of the configuration should be <configuration> */
  	public static final Message ROOT_ELEMENT_MISS_MATCH = MESSAGE_SET.getMessage("RootElementMissMatch");

  	/** Exception while creating the configuration-object. */
  	public static final Message EXCEPTION_CREATING_CONFIG_OBJECT = MESSAGE_SET.getMessage("ExceptionCreatingConfigObject");

  	/** Unable to parse the directory specification. */
  	public static final Message UNABLE_TO_PARESE_DIRECTORY_SPECIFICATION = MESSAGE_SET.getMessage("UnableToPareseDirectorySpecification");

  	/** Driveletter '{0}' is not a valid drive name. */
  	public static final Message DRIVELETTER_NOT_VALID = MESSAGE_SET.getMessage("DriveletterNotValid");

  	/** Invalid configuration file root element {0}. */
  	public static final Message INVALID_CONFIGURATION_FILE_ROOT_ELEMENT = MESSAGE_SET.getMessage("InvalidConfigurationFileRootElement");

  	/** Unable to read 'select'-element. */
  	public static final Message UNABLE_TO_READ_SELECT_ELEMENT = MESSAGE_SET.getMessage("UnableToReadSelectElement");

  	/** Unable to read 'file type'-element. */
  	public static final Message UNABLE_TO_READ_FILE_TYPE_ELEMENT = MESSAGE_SET.getMessage("UnableToReadFileTypeElement");

  	/** Filter element has no 'type' attribute */
  	public static final Message FILTER_ELEMENT_HAS_NO_TYPE_ATTRIBUTE = MESSAGE_SET.getMessage("FilterElementHasNoTypeAttribute");

  	/** Unable to read 'filter'-element. */
  	public static final Message UNABLE_TO_READ_FILTER_ELEMENT = MESSAGE_SET.getMessage("UnableToReadFilterElement");

  	/** Regular expression filter is missing 'regexp' attribute. */
  	public static final Message REG_EXP_FILTER_MISSING_REGEXP_ATTRIBUTE = MESSAGE_SET.getMessage("RegExpFilterMissingRegexpAttribute");

  	/** Regular expression filter is missing 'output' attribute. */
  	public static final Message REG_EXP_FILTER_MISSING_OUTPUT_ATTRIBUTE = MESSAGE_SET.getMessage("RegExpFilterMissingOutputAttribute");

  	/** Invalid regular expression {0} */
  	public static final Message INVALID_REG_EXP = MESSAGE_SET.getMessage("InvalidRegExp");

  	/** Invalid subelement '{0}' */
  	public static final Message INVALID_SUB_ELEMENT = MESSAGE_SET.getMessage("InvalidSubElement");

  	/** Unable to read 'foreach'-element. */
  	public static final Message UNABLE_TO_READ_FOREACH_ELEMENT = MESSAGE_SET.getMessage("UnableToReadForeachElement");

  	/** 'then' branch is already set for this 'if'. */
  	public static final Message THEN_BRANCH_IS_ALREADY_SET = MESSAGE_SET.getMessage("ThenBranchIsAlreadySet");

  	/** 'else' branch is already set for this 'if'. */
  	public static final Message ELSE_BRANCH_IS_ALREADY_SET = MESSAGE_SET.getMessage("ElseBranchIsAlreadySet");

  	/** Invalid condition '{0}' */
  	public static final Message INVALID_CONDITION = MESSAGE_SET.getMessage("InvalidCondition");

  	/** Input element with type 'xml' must have a path attribute. */
  	public static final Message INPUT_ELEMENT_XML_MUST_HAVE_PATH_ATTRIB = MESSAGE_SET.getMessage("InputElementXmlMustHavePathAttrib");

  	/** Input element with type 'pretty-xml' must have a path attribute. */
  	public static final Message INP_ELEMENT_PRETTY_XML_MUST_HAVE_PATH_ATTRIB = MESSAGE_SET.getMessage("InpElementPrettyXmlMustHavePathAttrib");

  	/** Invalid type attribute value '{0}'for the input element. */
  	public static final Message INVALID_TYPE_ATTRIB_FOR_INPUT_ELEMENT = MESSAGE_SET.getMessage("InvalidTypeAttribForInputElement");

  	/** Unable to read 'input'-element */
  	public static final Message UNABLE_TO_READ_INPUT_ELEMENT = MESSAGE_SET.getMessage("UnableToReadInputElement");

  	/** No 'outvalues' attribute for output element. */
  	public static final Message NO_OUTVALUES_ATTRIB_FOR_OUTPUT_ELM = MESSAGE_SET.getMessage("NoOutvaluesAttribForOutputElm");

  	/** Invalid 'outvalues' attribute value  */
  	public static final Message INVALID_OUTVALUES_ATTRIB = MESSAGE_SET.getMessage("InvalidOutvaluesAttrib");

  	/** Unable to read 'output'-element. */
  	public static final Message UNABLE_TO_READ_OUTPUT_ELM = MESSAGE_SET.getMessage("UnableToReadOutputElm");

  	/** Invalid number format '{0}' */
  	public static final Message INVALID_NUMBER_FORMAT = MESSAGE_SET.getMessage("InvalidNumberFormat");

  	/** Invalid input date format '{0}' */
  	public static final Message INVALID_INPUT_DATE_FORMAT = MESSAGE_SET.getMessage("InvalidInputDateFormat");

  	/** Invalid output date format {0} */
  	public static final Message INVALID_OUTPUT_DATE_FORMAT = MESSAGE_SET.getMessage("InvalidOutputDateFormat");

  	/** Input date format missing. */
  	public static final Message INPUT_DATE_FORMAT_MISSING = MESSAGE_SET.getMessage("InputDateFormatMissing");

  	/** Input date format missing. */
  	public static final Message OUTPUT_DATE_FORMAT_MISSING = MESSAGE_SET.getMessage("OutputDateFormatMissing");

  	/** RecordWriter is uninitialized. */
  	public static final Message RECORD_WRITER_UNINITIALIZED = MESSAGE_SET.getMessage("RecordWriterUninitialized");

  	/** File type '{0}' not found in configuration. */
  	public static final Message FILE_TYPE_NOT_FOUND = MESSAGE_SET.getMessage("FileTypeNotFound");

  	/** Invalid file type {0} */
  	public static final Message INVALID_FILE_TYPE = MESSAGE_SET.getMessage("InvalidFileType");

  	/** File is empty. */
  	public static final Message FILE_EMPTY = MESSAGE_SET.getMessage("FileEmpty");

  	/** At line {0} : No matching record found.Already read records: {1} */
  	public static final Message AT_LINE_NO_MATCHING_RECORDS_FOUND = MESSAGE_SET.getMessage("AtLineNoMatchingRecordsFound");

  	/** At line {0} : Group index {1} not found for field {2} */
  	public static final Message AT_LINE_GROUP_INDEX_NOT_FOUND = MESSAGE_SET.getMessage("AtLineGroupIndexNotFound");

  	/** Please Provide filename. */
  	public static final Message PLEASE_PROVIDE_FILE_NAME = MESSAGE_SET.getMessage("PleaseProvideFileName");

  	/** Input File not supported. */
  	public static final Message INPUT_FILE_NOT_SUPPORTED = MESSAGE_SET.getMessage("InputFileNotSupported");

  	/** File not found. */
  	public static final Message FILE_NOT_FOUND = MESSAGE_SET.getMessage("FileNotFound");

  	/** no sheet found at: {0} */
  	public static final Message NO_SHEET_FOUND = MESSAGE_SET.getMessage("NoSheetFound");

  	/** Column index {0} not found. Maxcol index:{1} */
  	public static final Message COLUMN_INDEX_NOT_FOUND = MESSAGE_SET.getMessage("ColumnIndexNotFound");

  	/** Column index {0} not valid. Enter a valid column index. */
  	public static final Message COLUMN_INDEX_NOT_VALID = MESSAGE_SET.getMessage("ColumnIndexNotValid");

  	/** IOException occurred while reading file {0} */
  	public static final Message IOEXCEPTION_WHILE_READING_FILE = MESSAGE_SET.getMessage("IOExceptionWhileReadingFile");

  	/** Unable to open source file. */
  	public static final Message UNABLE_TO_OPEN_SOURCE_FILE = MESSAGE_SET.getMessage("UnableToOpenSourceFile");

  	/** Unable to create destination file. */
  	public static final Message UNABLE_TO_CREATE_DEST_FILE = MESSAGE_SET.getMessage("UnableToCreateDestFile");

  	/** Error while copying the file. */
  	public static final Message ERROR_COPYING_FILE = MESSAGE_SET.getMessage("ErrorCopyingFile");

  	/** Unable to create processing folder: {0} */
  	public static final Message UNABLE_TO_CREATE_PROC_FOLDER = MESSAGE_SET.getMessage("UnableToCreateProcFolder");

  	/** Processing folder is not a folder: {0} */
  	public static final Message PROC_FOLDER_IS_NOT_FOLDER = MESSAGE_SET.getMessage("ProcFolderIsNotFolder");

  	/** Processing folder is not readable: {0} */
  	public static final Message PROC_FOLDER_NOT_REACHABLE = MESSAGE_SET.getMessage("ProcFolderNotReachable");

  	/** Processing folder is not writable: {0} */
  	public static final Message PROC_DIR_NOT_WRITABLE = MESSAGE_SET.getMessage("ProcDirNotWritable");

  	/** Character set '{0}' could not be found. */
  	public static final Message CHARSET_COULD_NOT_FOUND = MESSAGE_SET.getMessage("CharsetCouldNotFound");

  	/** Missing attribute 'prefix' from namespace binding element. */
  	public static final Message MISSING_ATTRIB_PREFIX = MESSAGE_SET.getMessage("MissingAttribPrefix");

  	/** Missing attribute 'uri' from namespace binding element. */
  	public static final Message MISSING_ATTRIB_URI = MESSAGE_SET.getMessage("MissingAttribUri");

  	/** Illegal value {0} for parameter {1} */
  	public static final Message ILLEGAL_VALUE_FOR_PARAM = MESSAGE_SET.getMessage("IllegalValueForParam");

  	/** "Parameter {0} is missing. */
  	public static final Message PARAM_MISSING = MESSAGE_SET.getMessage("ParamMissing");

  	/** Unable to create XPath: {0} */
  	public static final Message UNABLE_TO_CREATE_XPATH = MESSAGE_SET.getMessage("UnableToCreateXPath");

  	/** File access is not allowed. */
  	public static final Message FILE_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("FileAccessNotAllowed");

  	/** Unable to open the output file {0} */
  	public static final Message UNABLE_TO_OPEN_OUTPUT_FILE = MESSAGE_SET.getMessage("UnableToOpenOutputFile");

  	/** Unable to write the output file {0} */
  	public static final Message UNABLE_TO_WRITE_OUTPUT_FILE = MESSAGE_SET.getMessage("UnableToWriteOutputFile");

  	/** Configuration file not set for this connector. */
  	public static final Message CONFIGURATION_FILE_NOT_SET = MESSAGE_SET.getMessage("ConfigurationFileNotSet");

  	/** Invalid response received from XMLStore. */
  	public static final Message INVALID_RESPONSEFROM_XMLSTORE = MESSAGE_SET.getMessage("InvalidResponsefromXMLStore");

  	/** Unable to load WriteFileRecords configuration: {0} */
  	public static final Message UNABLE_TO_LOAD_WRITE_FILE_RECORDS = MESSAGE_SET.getMessage("UnableToLoadWriteFileRecords");

  	/** Parameter {0} is Empty. */
  	public static final Message PARAM_EMPTY = MESSAGE_SET.getMessage("ParamEmpty");

  	/** Unable to write file: {0} */
  	public static final Message UNABLE_TO_WRITE_FILE = MESSAGE_SET.getMessage("UnableToWriteFile");

  	/** "Source directory access is not allowed. */
  	public static final Message SRC_DIR_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("SrcDirAccessNotAllowed");

  	/** Destination directory access is not allowed. */
  	public static final Message DEST_DIR_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("DestDirAccessNotAllowed");

  	/** Source directory does not exist. */
  	public static final Message SRC_DIR_NOT_EXIST = MESSAGE_SET.getMessage("SrcDirNotExist");

  	/** Source directory is not a directory. */
  	public static final Message SRC_DIR_IS_NOT_DIRECTORY = MESSAGE_SET.getMessage("SrcDirIsNotDirectory");

  	/** Destination directory does not exist. */
  	public static final Message DEST_DIR_NOT_EXIST = MESSAGE_SET.getMessage("DestDirNotExist");

  	/** Destination directory is not a directory. */
  	public static final Message DEST_DIR_IS_NOT_DIRECTORY = MESSAGE_SET.getMessage("DestDirIsNotDirectory");

  	/** Invalid file type parameter. */
  	public static final Message INVALID_FILE_TYPE_PARAM = MESSAGE_SET.getMessage("InvalidFileTypeParam");

  	/** Unable to move file from {0} to {1} */
  	public static final Message UNABLE_TO_MOVE_FILE = MESSAGE_SET.getMessage("UnableToMoveFile");

  	/** File Does not exist. {0}*/
  	public static final Message FILE_NOT_EXIST = MESSAGE_SET.getMessage("FileNotExist");

  	/** Unable to read input file: {0} */
  	public static final Message UNABLE_TO_READ_INPUT_FILE = MESSAGE_SET.getMessage("UnableToReadInputFile");

  	/** XML query found no elements. */
  	public static final Message XMLQUERY_FOUND_NO_ELEMENTS = MESSAGE_SET.getMessage("XMLQueryFoundNoElements");

  	/** Unable to perform the XML query '{0}'." */
  	public static final Message UNABLE_TO_PERFORM_XMLQUERY = MESSAGE_SET.getMessage("UnableToPerformXMLQuery");

  	/** Unable to parse the cursor data. */
  	public static final Message UNABLE_TO_PARSE_CURSOR_DATA = MESSAGE_SET.getMessage("UnableToParseCursorData");

  	/** Unable to open the file: {0} */
  	public static final Message UNABLE_TO_OPEN_FILE = MESSAGE_SET.getMessage("UnableToOpenFile");

  	/** Unable to create the response cursor data. */
  	public static final Message UNABLE_TO_CREATE_RESPONSE_CURSOR_DATA = MESSAGE_SET.getMessage("UnableToCreateResponseCursorData");

  	/** Unable to load ReadFileRecords configuration: {0} */
  	public static final Message UNABLE_TO_LOAD_READ_FILE_CONFIG = MESSAGE_SET.getMessage("UnableToLoadReadFileConfig");

  	/** Unable to open the input file. */
  	public static final Message UNABLE_TO_OPEN_INPUT_FILE = MESSAGE_SET.getMessage("UnableToOpenInputFile");

  	/** Files bigger than 2GB are not supported. */
  	public static final Message FILE_SIZE_BIGGER = MESSAGE_SET.getMessage("FileSizeBigger");

  	/** Unable to parse the file. */
  	public static final Message UNABLE_TO_PARSE_FILE = MESSAGE_SET.getMessage("UnableToParseFile");

  	/** Unable to read file: {0} */
  	public static final Message UNABLE_TO_READ_FILE = MESSAGE_SET.getMessage("UnableToReadFile");

  	/** Source file access is not allowed. */
  	public static final Message SRC_FILE_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("SrcFileAccessNotAllowed");

  	/** Destination file access is not allowed. */
  	public static final Message DESTFILE_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("DestfileAccessNotAllowed");

  	/** Source file does not exist. */
  	public static final Message SRC_FILE_NOT_EXIST = MESSAGE_SET.getMessage("SrcFileNotExist");

  	/** Source file is a directory. */
  	public static final Message SRC_FILE_IS_ADIRECTORY = MESSAGE_SET.getMessage("SrcFileIsADirectory");

  	/** Destination file exists and is a directory. */
  	public static final Message DEST_FILE_IS_ADIRECTORY = MESSAGE_SET.getMessage("DestFileIsADirectory");

  	/** Destination file exists and overwrite is not specified. */
  	public static final Message DEST_FILE_AREADY_EXIST = MESSAGE_SET.getMessage("DestFileAreadyExist");

  	/** Unable to delete the destination file. */
  	public static final Message UNABLE_TO_DELETE_DEST_FILE = MESSAGE_SET.getMessage("UnableToDeleteDestFile");

  	/** Unable to delete the source file. */
  	public static final Message UNABLE_TO_DELETE_SRC_FILE = MESSAGE_SET.getMessage("UnableToDeleteSrcFile");

  	/** Invalid value for parameter {0} */
  	public static final Message INVALID_VALUE_FOR_PARAM = MESSAGE_SET.getMessage("InvalidValueForParam");

  	/** Directory does not exist. */
  	public static final Message DIR_NOT_EXIST = MESSAGE_SET.getMessage("DirNotExist");

  	/** Directory is not a directory. */
  	public static final Message DIR_IS_NOT_ADIRECTORY = MESSAGE_SET.getMessage("DirIsNotADirectory");

  	/** Unable to list files in the directory. */
  	public static final Message UNABLE_TO_LIST_FILES = MESSAGE_SET.getMessage("UnableToListFiles");

  	/** File is a directory. */
  	public static final Message FILE_IS_ADIRECTORY = MESSAGE_SET.getMessage("FileIsADirectory");

  	/** Unable to delete the file. */
  	public static final Message UNABLE_TO_DELETE_FILE = MESSAGE_SET.getMessage("UnableToDeleteFile");

  	/** Parent directory access is not allowed. */
  	public static final Message PARENT_DIR_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("ParentDirAccessNotAllowed");

  	/** The specified parent directory cannot be found by the system. */
  	public static final Message PARENT_DIR_NOT_FOUND = MESSAGE_SET.getMessage("ParentDirNotFound");

  	/** Unable to create directory  */
  	public static final Message UNABLE_TO_CREATE_DIR = MESSAGE_SET.getMessage("UnableToCreateDir");
  	
  	/** Directory access not allowed  */
  	public static final Message DIR_ACCESS_NOT_ALLOWED = MESSAGE_SET.getMessage("DirAccessNotAllowed");
}
