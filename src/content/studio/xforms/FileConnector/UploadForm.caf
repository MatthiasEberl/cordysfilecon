
<caf>
	<documentProperties>
		<name
			label="">XForms/FileConnector/UploadForm</name>
		<description>UploadForm</description>
		<caption/>
		<mimeType>caf</mimeType>
		<notes/>
		<version>vcmdemo10</version>
		<revision/>
		<createdBy></createdBy>
		<creationDate></creationDate>
		<lastModifiedBy></lastModifiedBy>
		<lastModificationDate></lastModificationDate>
		<customProperties>
			<published></published>
			<publishDate></publishDate>
			<publishUser></publishUser>
			<publishPath>/cordys/XForms/FileConnector/UploadForm.caf</publishPath>
		</customProperties>
	</documentProperties>
	<content>
		<modelProperties>
			<dataObject>
				<uniquenamemodel>Yes</uniquenamemodel>
				<migratetouniquename>true</migratetouniquename>
			</dataObject>
		</modelProperties>
		<xformhtml
			xformsversion="1"
			key="/UploadForm_vcmdemo10.caf"
			focusatstartup="true"
			wcpforms:vcmVersion="vcmdemo10"
			xmlns="http://schemas.cordys.com/1.0/xform"
			xmlns:xforms="http://www.w3.org/2002/xforms/cr"
			xmlns:ev="http://www.w3.org/2001/xml-events"
			xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
			xmlns:eibus="http://schemas.cordys.com/wcp/webframework">
			<xhead>
				<script
					src="/cordys/coe/fileconnector/filemanager-common.js"
					xmlns=""
				/>
				<xforms:model
					id="CheckIfExistsModel"
					wcpforms:businessElement="tuple"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					associatedmodel=""
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:xforms="http://www.w3.org/2002/xforms/cr">
					<xforms:instance
						wcpforms:iteratorSize="50"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						xmlns:xforms="http://www.w3.org/2002/xforms/cr">
						<wcpforms:dataset
							src="http://schemas.cordys.com/1.0/ac/FileConnector/GetListOfFiles"
							type="get">
							<directory
								fieldRef="directory"
								xmlns="http://schemas.cordys.com/1.0/ac/FileConnector"
							/>
							<resultpathtype
								xmlns="http://schemas.cordys.com/1.0/ac/FileConnector"
							/>
							<filter
								xmlns="http://schemas.cordys.com/1.0/ac/FileConnector"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/1.0/ac/FileConnector</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/1.0/ac/FileConnector</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xml
					xmlns="">
					<xml
						id="uploadRequest">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<WriteFile
									xmlns="http://schemas.cordys.com/1.0/ac/FileConnector">
									<filename/>
									<append>false</append>
									<encoded>true</encoded>
									<data>Upload:FileContent1</data>
								</WriteFile>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
				</xml>
			</xhead>
			<xbody>
				<xforms:group
					wcpforms:layout="free"
					id="xbody_group"
					wcpforms:labelalign="ontop">
					<xforms:input
						id="FilePathInput"
						doEBIValidate="false"
						wcpforms:class="f_layout"
						wcpforms:size="880 null"
						wcpforms:anchors="10px 10px 112px null"
						wcpforms:position="10 10">
						<xforms:label
							wcpforms:class="v_label">File Path</xforms:label>
					</xforms:input>
					<xforms:group
						appearance="controlbox"
						id="controlbox1"
						controltype="button"
						wcpforms:layout="horizontal"
						wcpforms:class="f_layout"
						wcpforms:align="left_align"
						wcpforms:size="80 23"
						wcpforms:anchors="null 20px 12px null"
						wcpforms:position="910 20">
						<xforms:trigger
							id="SelectFileButton"
							wcpforms:class="h_button"
							wcpforms:size="60 23">
							<xforms:label>Select</xforms:label>
							<xforms:action
								ev:event="xforms-activate">
								<xforms:SelectFileButton_Click/>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>
					<xforms:group
						appearance="controlbox"
						id="controlbox2"
						controltype="button"
						wcpforms:layout="horizontal"
						wcpforms:class="f_layout"
						wcpforms:align="left_align"
						wcpforms:size="190 30"
						wcpforms:anchors="null 70px 22px 841px"
						wcpforms:position="790 70">
						<xforms:trigger
							id="UploadButton"
							wcpforms:class="h_button"
							wcpforms:size="70 23">
							<xforms:label>Upload</xforms:label>
							<xforms:action
								ev:event="xforms-activate">
								<xforms:UploadButton_Click/>
							</xforms:action>
						</xforms:trigger>
						<xforms:trigger
							id="CancelButton"
							wcpforms:class="h_button"
							wcpforms:size="92 23">
							<xforms:label>Close</xforms:label>
							<xforms:action
								ev:event="xforms-activate">
								<xforms:CancelButton_Click/>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>
					<xforms:select1
						appearance="check"
						id="OverwriteCheckbox"
						doEBIValidate="false"
						wcpforms:class="f_layout"
						wcpforms:size="144 null"
						wcpforms:position="10 50">
						<xforms:label>Overwrite existing</xforms:label>
						<xforms:item>
							<xforms:label>true</xforms:label>
							<xforms:value>true</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>false</xforms:label>
							<xforms:value>false</xforms:value>
						</xforms:item>
					</xforms:select1>
				</xforms:group>
			</xbody>
			<xformsscript>
				<![CDATA[//Global reference to the upload control, so it can be used in all events.
var uploadControl = null;

// Parent page data.
var parentData = null;
var importOk = false;

// Contains the file path on the server.
var destFileName = null;
var destFilePath = null;

function Form_Init(eventObject)
{
    if (application.event && application.event.data) {
        parentData = application.event.data;
        parentData.onParentClose = function() { parentData = null; }
    }
     
    // test code
    else { parentData = { path: "c:/temp" }; }
    
    //Create upload control and fill the reference
    uploadControl = document.createElement("EIBUS:UPLOAD");

    //Set upload properties
    uploadControl.setAttribute("encode", "true");
    uploadControl.setAttribute("filecount", "1");
    uploadControl.setAttribute("showStatus", "true");
    uploadControl.onupload = onUploadHandler;
    uploadControl.request = uploadRequest;
    
    if (parentData && parentData.destSoapNodeDn) {
        // Set the destination org DN from the SOAP node DN. Apparently
        // upload component does not have the receiver DN property.
        var destOrgDn = parentData.destSoapNodeDn.substring(parentData.destSoapNodeDn.indexOf("o="));

        uploadControl.organization = destOrgDn;
        CheckIfExistsModel.instance.setReceiver(parentData.destSoapNodeDn);
    }   

    //Add the upload library from the webtoolkit
    application.addLibrary("/cordys/wcp/library/util/upload.htm",uploadControl);
}

function Form_BeforeClose(eventObject)
{
    if (parentData && parentData.childClose) {
        parentData.childClose(importOk);
        parentData = null;
 }

    //memory cleaning
    application.removeLibrary("/cordys/wcp/library/util/upload.htm",uploadControl);
}

function SelectFileButton_Click(eventObject)
{
    FilePathInput.setValue(uploadControl.browse(1));
    getDestFilePath();
}

function onUploadHandler()
{
    var status = "";
    var returnNode = window.application.event.response.selectSingleNode("//return");
    
    if (returnNode && returnNode.text) {
        status = returnNode.text;
        importOk = true;
    } 
 
     //setTimeout("application.container.close()", 100); 
}

function getFileNameFromInput() {
    var name = FilePathInput.getValue();
    
    if (! name) {
        return null;
    }
    
    var pos;
    
    if ((pos = name.lastIndexOf("\\")) >= 0 && pos < name.length - 1) {
        return name.substring(pos + 1);
    } else if ((pos = name.lastIndexOf("/")) >= 0 && pos < name.length - 1) {
        return name.substring(pos + 1);
    }
    
    return null;
}

function getDestFilePath()
{
    var fileName = getFileNameFromInput();
    
    if (! fileName) {
        alert("Could not determine file name.");
        return;
    }
    
    destFileName = fileName;
    
    var filePath = parentData ? parentData.path : null;
    
    if (! filePath) {
        alert("Parent folder is not set.");
        return;
    }
    
    filePath += "/" + fileName;
    
    destFilePath = filePath;
}

function checkIfExists()
{
    var filePath = parentData ? parentData.path : null;

    if (! filePath || ! destFileName) {
        alert("Enter a file first.");
        return;
    }

    var methodNode = CheckIfExistsModel.getMethodRequest().selectSingleNode("//GetListOfFiles");
    
    methodNode.selectSingleNode("directory").text = filePath;
    methodNode.selectSingleNode("filter").text = destFileName.replace(/([?.*])/g, "\\$1");
    
    CheckIfExistsModel.getDataset();

    return CheckIfExistsModel.getData().selectSingleNode("//tuple/entries/file");
}

function UploadButton_Click(eventObject)
{
    if (! destFilePath) {
        alert("Destination file path could not be determined.");
        return;
    }
    
    if (OverwriteCheckbox.getValue() != "true") {
        if (checkIfExists()) {
            alert("File already exists.");
            return;
        }
        
        if (CheckIfExistsModel.soapFaultOccurred) {
            return;
        }
    }
    
    uploadControl.request.selectSingleNode("//WriteFile/filename").text = destFilePath;
    uploadControl.uploadFile();
}

function CancelButton_Click(eventObject)
{
    application.container.close();
}]]>
			</xformsscript>
			<xforms:action
				ev:event="xforms-init">
				<xforms:Form_Init/>
			</xforms:action>
			<xforms:action
				ev:event="xforms-before-close">
				<xforms:Form_BeforeClose/>
			</xforms:action>
		</xformhtml>
	</content>
</caf>
